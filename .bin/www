#!/usr/bin/env node

const {
  server: { port }
} = require('../config');

const app = require('../src/app');
const http = require('http');


/**
 * Create HTTP server.
 */
app.set('port', port);
const server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log('♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦');
  console.log(`♦♦♦♦♦♦  Server is ready for usage on port - ${port} ♦♦♦♦♦♦`);
  console.log('♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦');

  enableGracefulShutdown();
}

function enableGracefulShutdown() {
    const exitHandler = error => {
      if (error) console.error(error);

      console.log('Init Graceful shutdown...');
      process.exit();
    };

        // catches ctrl+c event
        process.on('SIGINT', exitHandler)

        // catches "kill pid" (for example: nodemon restart)
        process.on('SIGUSR1', exitHandler)
        process.on('SIGUSR2', exitHandler)

        // catches uncaught exceptions && unhandled rejection
        process.on('uncaughtException', exitHandler)
        process.on('unhandledRejection', exitHandler)
  }
